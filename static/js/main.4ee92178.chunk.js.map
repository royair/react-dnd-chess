{"version":3,"sources":["Constants.js","components/Knight.jsx","components/Square.jsx","components/BoardSquare.jsx","components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","knight","_this$props","this","props","connectDragSource","isDragging","react_default","a","createElement","className","style","opacity","Component","defaultProps","DragSource","beginDrag","connect","monitor","dragSource","Square","children","black","backgroundColor","color","BoardSquare","renderOverlay","position","top","left","height","width","zIndex","x","y","connectDropTarget","isOver","canDrop","src_components_Square","DropTarget","canMoveKnight","drop","moveKnight","dropTarget","Board","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","renderSquare","knightPosition","key","concat","components_BoardSquare","renderPiece","_ref","_ref2","slicedToArray","knightX","knightY","components_Knight","handleSquareClick","toX","toY","setState","_this$state$knightPos","state","dxAbs","Math","abs","dyAbs","squares","push","App","lib","backend","HTML5Backend","src_components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ee92178.chunk.js","sourcesContent":["export const ItemTypes = {\n  KNIGHT: 'knight'\n};","import React, { Component } from 'react';\nimport { ItemTypes } from '../Constants';\nimport { DragSource } from 'react-dnd';\n\nimport './Knight.scss';\n\nconst knightSource = {\n  beginDrag(props) {\n    return {};\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  }\n}\n\nclass knight extends Component {\n  render() {\n    const { connectDragSource, isDragging } = this.props;\n\n    return connectDragSource(\n      <span className=\"Knight\"\n            style={{\n              opacity: isDragging ? 0.5 : 1,\n            }}>\n        â™˜\n      </span>\n    )\n  }\n}\n\nknight.defaultProps = {};\n\nexport default DragSource(ItemTypes.KNIGHT, knightSource, collect)(knight);\n","import React, { Component } from 'react';\n\nimport './Square.scss';\n\nclass Square extends Component {\n  render() {\n    const { children, black } = this.props;\n    const backgroundColor     = black ? 'black' : 'white';\n    const color               = black ? 'white' : 'black';\n    return (\n      <div className=\"Square\" style={{\n        backgroundColor,\n        color,\n      }}>{children}</div>\n    )\n  }\n}\n\nSquare.defaultProps = {};\n\nexport default Square;\n","import React, { Component } from 'react';\nimport { DropTarget } from \"react-dnd\";\nimport { ItemTypes } from \"../Constants\";\nimport Square from './Square';\n\n//import './BoardSquare.scss';\n\nconst squareTarget = {\n  canDrop(props) {\n    return props.canMoveKnight(props.x, props.y);\n  },\n\n  drop(props, monitor) {\n    props.moveKnight(props.x, props.y);\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n  }\n}\n\nclass BoardSquare extends Component {\n\n  renderOverlay = (color) => {\n    return (\n      <div style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: '100%',\n        width: '100%',\n        zIndex: 1,\n        opacity: 0.5,\n        backgroundColor: color,\n      }}/>\n    );\n  }\n\n  render() {\n    const { x, y, children, connectDropTarget, isOver, canDrop } = this.props;\n    const black                                                  = (x + y) % 2 === 1;\n    return connectDropTarget(\n      <div style={{ height: '100%', position: 'relative', }}>\n        <Square black={black}>\n          {children}\n        </Square>\n        {isOver && !canDrop && this.renderOverlay('red')}\n        {isOver && canDrop && this.renderOverlay('green')}\n        {!isOver && canDrop && this.renderOverlay('yellow')}\n      </div>\n    )\n  }\n}\n\nBoardSquare.defaultProps = {};\n\nexport default DropTarget(ItemTypes.KNIGHT, squareTarget, collect)(BoardSquare);\n","import React, { Component } from 'react';\n\nimport Knight from './Knight';\nimport BoardSquare from './BoardSquare';\n\nimport './Board.scss';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { knightPosition: [1, 7] }\n  }\n\n  renderSquare = (x, y, knightPosition) => {\n    const key = `${x}${y}`;\n\n    return (\n      <div key={key}\n           style={{ width: '12.5%', height: '12.5%' }}>\n        <BoardSquare x={x} y={y}\n                     moveKnight={this.moveKnight}\n                     canMoveKnight={this.canMoveKnight}>\n          {this.renderPiece(x, y, knightPosition)}\n        </BoardSquare>\n      </div>\n    )\n  };\n\n  renderPiece = (x, y, [knightX, knightY]) => {\n    if (x === knightX && y === knightY)\n      return <Knight/>;\n  };\n\n  handleSquareClick = (x, y) => {\n    if (this.canMoveKnight(x, y))\n      this.moveKnight(x, y)\n  };\n\n  moveKnight = (toX, toY) => {\n    this.setState(() => ({ knightPosition: [toX, toY,] }));\n  };\n\n  canMoveKnight = (toX, toY) => {\n    const [x, y] = this.state.knightPosition;\n    const dxAbs  = Math.abs(toX - x);\n    const dyAbs  = Math.abs(toY - y);\n\n    return (dxAbs === 1 && dyAbs === 2) || (dxAbs === 2 && dyAbs === 1);\n  };\n\n  render() {\n    const { knightPosition } = this.state;\n    const squares            = [];\n\n    for (let x = 0; x < 8; x++) {\n      for (let y = 0; y < 8; y++) {\n        squares.push(this.renderSquare(x, y, knightPosition));\n      }\n    }\n\n    return (\n        <div className=\"Board\">\n          {squares}\n        </div>\n    )\n  }\n}\n\nBoard.defaultProps = {};\n\nexport default Board;\n","import React, { Component } from 'react';\nimport { DragDropContextProvider } from 'react-dnd';\nimport HTML5Backend from \"react-dnd-html5-backend\";\n\nimport Board from './components/Board';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <DragDropContextProvider backend={HTML5Backend}>\n        <div className=\"App\">\n          <Board knightPosition={[3, 5]}/>\n        </div>\n      </DragDropContextProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}